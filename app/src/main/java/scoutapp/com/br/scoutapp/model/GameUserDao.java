package scoutapp.com.br.scoutapp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import scoutapp.com.br.scoutapp.model.GameUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_USER".
*/
public class GameUserDao extends AbstractDao<GameUser, Long> {

    public static final String TABLENAME = "GAME_USER";

    /**
     * Properties of entity GameUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Service = new Property(1, int.class, "service", false, "SERVICE");
        public final static Property Reception = new Property(2, int.class, "reception", false, "RECEPTION");
        public final static Property Forehand = new Property(3, int.class, "forehand", false, "FOREHAND");
        public final static Property Backhand = new Property(4, int.class, "backhand", false, "BACKHAND");
        public final static Property Smash = new Property(5, int.class, "smash", false, "SMASH");
        public final static Property Slice = new Property(6, int.class, "slice", false, "SLICE");
        public final static Property Block = new Property(7, int.class, "block", false, "BLOCK");
        public final static Property Flick = new Property(8, int.class, "flick", false, "FLICK");
        public final static Property Lob = new Property(9, int.class, "lob", false, "LOB");
        public final static Property Total = new Property(10, int.class, "total", false, "TOTAL");
        public final static Property ServiceLeftLongCrossed = new Property(11, int.class, "serviceLeftLongCrossed", false, "SERVICE_LEFT_LONG_CROSSED");
        public final static Property ServiceLeftLongParallel = new Property(12, int.class, "serviceLeftLongParallel", false, "SERVICE_LEFT_LONG_PARALLEL");
        public final static Property ServiceLeftShortCrossed = new Property(13, int.class, "serviceLeftShortCrossed", false, "SERVICE_LEFT_SHORT_CROSSED");
        public final static Property ServiceLeftShortParallel = new Property(14, int.class, "serviceLeftShortParallel", false, "SERVICE_LEFT_SHORT_PARALLEL");
        public final static Property ServiceMiddleLongCrossed = new Property(15, int.class, "serviceMiddleLongCrossed", false, "SERVICE_MIDDLE_LONG_CROSSED");
        public final static Property ServiceMiddleLongParallel = new Property(16, int.class, "serviceMiddleLongParallel", false, "SERVICE_MIDDLE_LONG_PARALLEL");
        public final static Property ServiceMiddleShortCrossed = new Property(17, int.class, "serviceMiddleShortCrossed", false, "SERVICE_MIDDLE_SHORT_CROSSED");
        public final static Property ServiceMiddleShortParallel = new Property(18, int.class, "serviceMiddleShortParallel", false, "SERVICE_MIDDLE_SHORT_PARALLEL");
        public final static Property ServiceRightLongCrossed = new Property(19, int.class, "serviceRightLongCrossed", false, "SERVICE_RIGHT_LONG_CROSSED");
        public final static Property ServiceRightLongParallel = new Property(20, int.class, "serviceRightLongParallel", false, "SERVICE_RIGHT_LONG_PARALLEL");
        public final static Property ServiceRightShortCrossed = new Property(21, int.class, "serviceRightShortCrossed", false, "SERVICE_RIGHT_SHORT_CROSSED");
        public final static Property ServiceRightShortParallel = new Property(22, int.class, "serviceRightShortParallel", false, "SERVICE_RIGHT_SHORT_PARALLEL");
        public final static Property ReceptionLeftLongCrossed = new Property(23, int.class, "receptionLeftLongCrossed", false, "RECEPTION_LEFT_LONG_CROSSED");
        public final static Property ReceptionLeftLongParallel = new Property(24, int.class, "receptionLeftLongParallel", false, "RECEPTION_LEFT_LONG_PARALLEL");
        public final static Property ReceptionLeftShortCrossed = new Property(25, int.class, "receptionLeftShortCrossed", false, "RECEPTION_LEFT_SHORT_CROSSED");
        public final static Property ReceptionLeftShortParallel = new Property(26, int.class, "receptionLeftShortParallel", false, "RECEPTION_LEFT_SHORT_PARALLEL");
        public final static Property ReceptionMiddleLongCrossed = new Property(27, int.class, "receptionMiddleLongCrossed", false, "RECEPTION_MIDDLE_LONG_CROSSED");
        public final static Property ReceptionMiddleLongParallel = new Property(28, int.class, "receptionMiddleLongParallel", false, "RECEPTION_MIDDLE_LONG_PARALLEL");
        public final static Property ReceptionMiddleShortCrossed = new Property(29, int.class, "receptionMiddleShortCrossed", false, "RECEPTION_MIDDLE_SHORT_CROSSED");
        public final static Property ReceptionMiddleShortParallel = new Property(30, int.class, "receptionMiddleShortParallel", false, "RECEPTION_MIDDLE_SHORT_PARALLEL");
        public final static Property ReceptionRightLongCrossed = new Property(31, int.class, "receptionRightLongCrossed", false, "RECEPTION_RIGHT_LONG_CROSSED");
        public final static Property ReceptionRightLongParallel = new Property(32, int.class, "receptionRightLongParallel", false, "RECEPTION_RIGHT_LONG_PARALLEL");
        public final static Property ReceptionRightShortCrossed = new Property(33, int.class, "receptionRightShortCrossed", false, "RECEPTION_RIGHT_SHORT_CROSSED");
        public final static Property ReceptionRightShortParallel = new Property(34, int.class, "receptionRightShortParallel", false, "RECEPTION_RIGHT_SHORT_PARALLEL");
        public final static Property ForehandLeftLongCrossed = new Property(35, int.class, "forehandLeftLongCrossed", false, "FOREHAND_LEFT_LONG_CROSSED");
        public final static Property ForehandLeftLongParallel = new Property(36, int.class, "forehandLeftLongParallel", false, "FOREHAND_LEFT_LONG_PARALLEL");
        public final static Property ForehandLeftShortCrossed = new Property(37, int.class, "forehandLeftShortCrossed", false, "FOREHAND_LEFT_SHORT_CROSSED");
        public final static Property ForehandLeftShortParallel = new Property(38, int.class, "forehandLeftShortParallel", false, "FOREHAND_LEFT_SHORT_PARALLEL");
        public final static Property ForehandMiddleLongCrossed = new Property(39, int.class, "forehandMiddleLongCrossed", false, "FOREHAND_MIDDLE_LONG_CROSSED");
        public final static Property ForehandMiddleLongParallel = new Property(40, int.class, "forehandMiddleLongParallel", false, "FOREHAND_MIDDLE_LONG_PARALLEL");
        public final static Property ForehandMiddleShortCrossed = new Property(41, int.class, "forehandMiddleShortCrossed", false, "FOREHAND_MIDDLE_SHORT_CROSSED");
        public final static Property ForehandMiddleShortParallel = new Property(42, int.class, "forehandMiddleShortParallel", false, "FOREHAND_MIDDLE_SHORT_PARALLEL");
        public final static Property ForehandRightLongCrossed = new Property(43, int.class, "forehandRightLongCrossed", false, "FOREHAND_RIGHT_LONG_CROSSED");
        public final static Property ForehandRightLongParallel = new Property(44, int.class, "forehandRightLongParallel", false, "FOREHAND_RIGHT_LONG_PARALLEL");
        public final static Property ForehandRightShortCrossed = new Property(45, int.class, "forehandRightShortCrossed", false, "FOREHAND_RIGHT_SHORT_CROSSED");
        public final static Property ForehandRightShortParallel = new Property(46, int.class, "forehandRightShortParallel", false, "FOREHAND_RIGHT_SHORT_PARALLEL");
        public final static Property BackhandLeftLongCrossed = new Property(47, int.class, "backhandLeftLongCrossed", false, "BACKHAND_LEFT_LONG_CROSSED");
        public final static Property BackhandLeftLongParallel = new Property(48, int.class, "backhandLeftLongParallel", false, "BACKHAND_LEFT_LONG_PARALLEL");
        public final static Property BackhandLeftShortCrossed = new Property(49, int.class, "backhandLeftShortCrossed", false, "BACKHAND_LEFT_SHORT_CROSSED");
        public final static Property BackhandLeftShortParallel = new Property(50, int.class, "backhandLeftShortParallel", false, "BACKHAND_LEFT_SHORT_PARALLEL");
        public final static Property BackhandMiddleLongCrossed = new Property(51, int.class, "backhandMiddleLongCrossed", false, "BACKHAND_MIDDLE_LONG_CROSSED");
        public final static Property BackhandMiddleLongParallel = new Property(52, int.class, "backhandMiddleLongParallel", false, "BACKHAND_MIDDLE_LONG_PARALLEL");
        public final static Property BackhandMiddleShortCrossed = new Property(53, int.class, "backhandMiddleShortCrossed", false, "BACKHAND_MIDDLE_SHORT_CROSSED");
        public final static Property BackhandMiddleShortParallel = new Property(54, int.class, "backhandMiddleShortParallel", false, "BACKHAND_MIDDLE_SHORT_PARALLEL");
        public final static Property BackhandRightLongCrossed = new Property(55, int.class, "backhandRightLongCrossed", false, "BACKHAND_RIGHT_LONG_CROSSED");
        public final static Property BackhandRightLongParallel = new Property(56, int.class, "backhandRightLongParallel", false, "BACKHAND_RIGHT_LONG_PARALLEL");
        public final static Property BackhandRightShortCrossed = new Property(57, int.class, "backhandRightShortCrossed", false, "BACKHAND_RIGHT_SHORT_CROSSED");
        public final static Property BackhandRightShortParallel = new Property(58, int.class, "backhandRightShortParallel", false, "BACKHAND_RIGHT_SHORT_PARALLEL");
        public final static Property SmashLeftLongCrossed = new Property(59, int.class, "smashLeftLongCrossed", false, "SMASH_LEFT_LONG_CROSSED");
        public final static Property SmashLeftLongParallel = new Property(60, int.class, "smashLeftLongParallel", false, "SMASH_LEFT_LONG_PARALLEL");
        public final static Property SmashLeftShortCrossed = new Property(61, int.class, "smashLeftShortCrossed", false, "SMASH_LEFT_SHORT_CROSSED");
        public final static Property SmashLeftShortParallel = new Property(62, int.class, "smashLeftShortParallel", false, "SMASH_LEFT_SHORT_PARALLEL");
        public final static Property SmashMiddleLongCrossed = new Property(63, int.class, "smashMiddleLongCrossed", false, "SMASH_MIDDLE_LONG_CROSSED");
        public final static Property SmashMiddleLongParallel = new Property(64, int.class, "smashMiddleLongParallel", false, "SMASH_MIDDLE_LONG_PARALLEL");
        public final static Property SmashMiddleShortCrossed = new Property(65, int.class, "smashMiddleShortCrossed", false, "SMASH_MIDDLE_SHORT_CROSSED");
        public final static Property SmashMiddleShortParallel = new Property(66, int.class, "smashMiddleShortParallel", false, "SMASH_MIDDLE_SHORT_PARALLEL");
        public final static Property SmashRightLongCrossed = new Property(67, int.class, "smashRightLongCrossed", false, "SMASH_RIGHT_LONG_CROSSED");
        public final static Property SmashRightLongParallel = new Property(68, int.class, "smashRightLongParallel", false, "SMASH_RIGHT_LONG_PARALLEL");
        public final static Property SmashRightShortCrossed = new Property(69, int.class, "smashRightShortCrossed", false, "SMASH_RIGHT_SHORT_CROSSED");
        public final static Property SmashRightShortParallel = new Property(70, int.class, "smashRightShortParallel", false, "SMASH_RIGHT_SHORT_PARALLEL");
        public final static Property SliceLeftLongCrossed = new Property(71, int.class, "sliceLeftLongCrossed", false, "SLICE_LEFT_LONG_CROSSED");
        public final static Property SliceLeftLongParallel = new Property(72, int.class, "sliceLeftLongParallel", false, "SLICE_LEFT_LONG_PARALLEL");
        public final static Property SliceLeftShortCrossed = new Property(73, int.class, "sliceLeftShortCrossed", false, "SLICE_LEFT_SHORT_CROSSED");
        public final static Property SliceLeftShortParallel = new Property(74, int.class, "sliceLeftShortParallel", false, "SLICE_LEFT_SHORT_PARALLEL");
        public final static Property SliceMiddleLongCrossed = new Property(75, int.class, "sliceMiddleLongCrossed", false, "SLICE_MIDDLE_LONG_CROSSED");
        public final static Property SliceMiddleLongParallel = new Property(76, int.class, "sliceMiddleLongParallel", false, "SLICE_MIDDLE_LONG_PARALLEL");
        public final static Property SliceMiddleShortCrossed = new Property(77, int.class, "sliceMiddleShortCrossed", false, "SLICE_MIDDLE_SHORT_CROSSED");
        public final static Property SliceMiddleShortParallel = new Property(78, int.class, "sliceMiddleShortParallel", false, "SLICE_MIDDLE_SHORT_PARALLEL");
        public final static Property SliceRightLongCrossed = new Property(79, int.class, "sliceRightLongCrossed", false, "SLICE_RIGHT_LONG_CROSSED");
        public final static Property SliceRightLongParallel = new Property(80, int.class, "sliceRightLongParallel", false, "SLICE_RIGHT_LONG_PARALLEL");
        public final static Property SliceRightShortCrossed = new Property(81, int.class, "sliceRightShortCrossed", false, "SLICE_RIGHT_SHORT_CROSSED");
        public final static Property SliceRightShortParallel = new Property(82, int.class, "sliceRightShortParallel", false, "SLICE_RIGHT_SHORT_PARALLEL");
        public final static Property BlockLeftLongCrossed = new Property(83, int.class, "blockLeftLongCrossed", false, "BLOCK_LEFT_LONG_CROSSED");
        public final static Property BlockLeftLongParallel = new Property(84, int.class, "blockLeftLongParallel", false, "BLOCK_LEFT_LONG_PARALLEL");
        public final static Property BlockLeftShortCrossed = new Property(85, int.class, "blockLeftShortCrossed", false, "BLOCK_LEFT_SHORT_CROSSED");
        public final static Property BlockLeftShortParallel = new Property(86, int.class, "blockLeftShortParallel", false, "BLOCK_LEFT_SHORT_PARALLEL");
        public final static Property BlockMiddleLongCrossed = new Property(87, int.class, "blockMiddleLongCrossed", false, "BLOCK_MIDDLE_LONG_CROSSED");
        public final static Property BlockMiddleLongParallel = new Property(88, int.class, "blockMiddleLongParallel", false, "BLOCK_MIDDLE_LONG_PARALLEL");
        public final static Property BlockMiddleShortCrossed = new Property(89, int.class, "blockMiddleShortCrossed", false, "BLOCK_MIDDLE_SHORT_CROSSED");
        public final static Property BlockMiddleShortParallel = new Property(90, int.class, "blockMiddleShortParallel", false, "BLOCK_MIDDLE_SHORT_PARALLEL");
        public final static Property BlockRightLongCrossed = new Property(91, int.class, "blockRightLongCrossed", false, "BLOCK_RIGHT_LONG_CROSSED");
        public final static Property BlockRightLongParallel = new Property(92, int.class, "blockRightLongParallel", false, "BLOCK_RIGHT_LONG_PARALLEL");
        public final static Property BlockRightShortCrossed = new Property(93, int.class, "blockRightShortCrossed", false, "BLOCK_RIGHT_SHORT_CROSSED");
        public final static Property BlockRightShortParallel = new Property(94, int.class, "blockRightShortParallel", false, "BLOCK_RIGHT_SHORT_PARALLEL");
        public final static Property FlickLeftLongCrossed = new Property(95, int.class, "flickLeftLongCrossed", false, "FLICK_LEFT_LONG_CROSSED");
        public final static Property FlickLeftLongParallel = new Property(96, int.class, "flickLeftLongParallel", false, "FLICK_LEFT_LONG_PARALLEL");
        public final static Property FlickLeftShortCrossed = new Property(97, int.class, "flickLeftShortCrossed", false, "FLICK_LEFT_SHORT_CROSSED");
        public final static Property FlickLeftShortParallel = new Property(98, int.class, "flickLeftShortParallel", false, "FLICK_LEFT_SHORT_PARALLEL");
        public final static Property FlickMiddleLongCrossed = new Property(99, int.class, "flickMiddleLongCrossed", false, "FLICK_MIDDLE_LONG_CROSSED");
        public final static Property FlickMiddleLongParallel = new Property(100, int.class, "flickMiddleLongParallel", false, "FLICK_MIDDLE_LONG_PARALLEL");
        public final static Property FlickMiddleShortCrossed = new Property(101, int.class, "flickMiddleShortCrossed", false, "FLICK_MIDDLE_SHORT_CROSSED");
        public final static Property FlickMiddleShortParallel = new Property(102, int.class, "flickMiddleShortParallel", false, "FLICK_MIDDLE_SHORT_PARALLEL");
        public final static Property FlickRightLongCrossed = new Property(103, int.class, "flickRightLongCrossed", false, "FLICK_RIGHT_LONG_CROSSED");
        public final static Property FlickRightLongParallel = new Property(104, int.class, "flickRightLongParallel", false, "FLICK_RIGHT_LONG_PARALLEL");
        public final static Property FlickRightShortCrossed = new Property(105, int.class, "flickRightShortCrossed", false, "FLICK_RIGHT_SHORT_CROSSED");
        public final static Property FlickRightShortParallel = new Property(106, int.class, "flickRightShortParallel", false, "FLICK_RIGHT_SHORT_PARALLEL");
        public final static Property LobLeftLongCrossed = new Property(107, int.class, "lobLeftLongCrossed", false, "LOB_LEFT_LONG_CROSSED");
        public final static Property LobLeftLongParallel = new Property(108, int.class, "lobLeftLongParallel", false, "LOB_LEFT_LONG_PARALLEL");
        public final static Property LobLeftShortCrossed = new Property(109, int.class, "lobLeftShortCrossed", false, "LOB_LEFT_SHORT_CROSSED");
        public final static Property LobLeftShortParallel = new Property(110, int.class, "lobLeftShortParallel", false, "LOB_LEFT_SHORT_PARALLEL");
        public final static Property LobMiddleLongCrossed = new Property(111, int.class, "lobMiddleLongCrossed", false, "LOB_MIDDLE_LONG_CROSSED");
        public final static Property LobMiddleLongParallel = new Property(112, int.class, "lobMiddleLongParallel", false, "LOB_MIDDLE_LONG_PARALLEL");
        public final static Property LobMiddleShortCrossed = new Property(113, int.class, "lobMiddleShortCrossed", false, "LOB_MIDDLE_SHORT_CROSSED");
        public final static Property LobMiddleShortParallel = new Property(114, int.class, "lobMiddleShortParallel", false, "LOB_MIDDLE_SHORT_PARALLEL");
        public final static Property LobRightLongCrossed = new Property(115, int.class, "lobRightLongCrossed", false, "LOB_RIGHT_LONG_CROSSED");
        public final static Property LobRightLongParallel = new Property(116, int.class, "lobRightLongParallel", false, "LOB_RIGHT_LONG_PARALLEL");
        public final static Property LobRightShortCrossed = new Property(117, int.class, "lobRightShortCrossed", false, "LOB_RIGHT_SHORT_CROSSED");
        public final static Property LobRightShortParallel = new Property(118, int.class, "lobRightShortParallel", false, "LOB_RIGHT_SHORT_PARALLEL");
    };


    public GameUserDao(DaoConfig config) {
        super(config);
    }
    
    public GameUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVICE\" INTEGER NOT NULL ," + // 1: service
                "\"RECEPTION\" INTEGER NOT NULL ," + // 2: reception
                "\"FOREHAND\" INTEGER NOT NULL ," + // 3: forehand
                "\"BACKHAND\" INTEGER NOT NULL ," + // 4: backhand
                "\"SMASH\" INTEGER NOT NULL ," + // 5: smash
                "\"SLICE\" INTEGER NOT NULL ," + // 6: slice
                "\"BLOCK\" INTEGER NOT NULL ," + // 7: block
                "\"FLICK\" INTEGER NOT NULL ," + // 8: flick
                "\"LOB\" INTEGER NOT NULL ," + // 9: lob
                "\"TOTAL\" INTEGER NOT NULL ," + // 10: total
                "\"SERVICE_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 11: serviceLeftLongCrossed
                "\"SERVICE_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 12: serviceLeftLongParallel
                "\"SERVICE_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 13: serviceLeftShortCrossed
                "\"SERVICE_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 14: serviceLeftShortParallel
                "\"SERVICE_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 15: serviceMiddleLongCrossed
                "\"SERVICE_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 16: serviceMiddleLongParallel
                "\"SERVICE_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 17: serviceMiddleShortCrossed
                "\"SERVICE_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 18: serviceMiddleShortParallel
                "\"SERVICE_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 19: serviceRightLongCrossed
                "\"SERVICE_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 20: serviceRightLongParallel
                "\"SERVICE_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 21: serviceRightShortCrossed
                "\"SERVICE_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 22: serviceRightShortParallel
                "\"RECEPTION_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 23: receptionLeftLongCrossed
                "\"RECEPTION_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 24: receptionLeftLongParallel
                "\"RECEPTION_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 25: receptionLeftShortCrossed
                "\"RECEPTION_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 26: receptionLeftShortParallel
                "\"RECEPTION_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 27: receptionMiddleLongCrossed
                "\"RECEPTION_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 28: receptionMiddleLongParallel
                "\"RECEPTION_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 29: receptionMiddleShortCrossed
                "\"RECEPTION_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 30: receptionMiddleShortParallel
                "\"RECEPTION_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 31: receptionRightLongCrossed
                "\"RECEPTION_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 32: receptionRightLongParallel
                "\"RECEPTION_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 33: receptionRightShortCrossed
                "\"RECEPTION_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 34: receptionRightShortParallel
                "\"FOREHAND_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 35: forehandLeftLongCrossed
                "\"FOREHAND_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 36: forehandLeftLongParallel
                "\"FOREHAND_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 37: forehandLeftShortCrossed
                "\"FOREHAND_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 38: forehandLeftShortParallel
                "\"FOREHAND_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 39: forehandMiddleLongCrossed
                "\"FOREHAND_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 40: forehandMiddleLongParallel
                "\"FOREHAND_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 41: forehandMiddleShortCrossed
                "\"FOREHAND_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 42: forehandMiddleShortParallel
                "\"FOREHAND_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 43: forehandRightLongCrossed
                "\"FOREHAND_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 44: forehandRightLongParallel
                "\"FOREHAND_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 45: forehandRightShortCrossed
                "\"FOREHAND_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 46: forehandRightShortParallel
                "\"BACKHAND_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 47: backhandLeftLongCrossed
                "\"BACKHAND_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 48: backhandLeftLongParallel
                "\"BACKHAND_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 49: backhandLeftShortCrossed
                "\"BACKHAND_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 50: backhandLeftShortParallel
                "\"BACKHAND_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 51: backhandMiddleLongCrossed
                "\"BACKHAND_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 52: backhandMiddleLongParallel
                "\"BACKHAND_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 53: backhandMiddleShortCrossed
                "\"BACKHAND_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 54: backhandMiddleShortParallel
                "\"BACKHAND_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 55: backhandRightLongCrossed
                "\"BACKHAND_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 56: backhandRightLongParallel
                "\"BACKHAND_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 57: backhandRightShortCrossed
                "\"BACKHAND_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 58: backhandRightShortParallel
                "\"SMASH_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 59: smashLeftLongCrossed
                "\"SMASH_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 60: smashLeftLongParallel
                "\"SMASH_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 61: smashLeftShortCrossed
                "\"SMASH_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 62: smashLeftShortParallel
                "\"SMASH_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 63: smashMiddleLongCrossed
                "\"SMASH_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 64: smashMiddleLongParallel
                "\"SMASH_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 65: smashMiddleShortCrossed
                "\"SMASH_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 66: smashMiddleShortParallel
                "\"SMASH_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 67: smashRightLongCrossed
                "\"SMASH_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 68: smashRightLongParallel
                "\"SMASH_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 69: smashRightShortCrossed
                "\"SMASH_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 70: smashRightShortParallel
                "\"SLICE_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 71: sliceLeftLongCrossed
                "\"SLICE_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 72: sliceLeftLongParallel
                "\"SLICE_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 73: sliceLeftShortCrossed
                "\"SLICE_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 74: sliceLeftShortParallel
                "\"SLICE_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 75: sliceMiddleLongCrossed
                "\"SLICE_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 76: sliceMiddleLongParallel
                "\"SLICE_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 77: sliceMiddleShortCrossed
                "\"SLICE_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 78: sliceMiddleShortParallel
                "\"SLICE_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 79: sliceRightLongCrossed
                "\"SLICE_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 80: sliceRightLongParallel
                "\"SLICE_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 81: sliceRightShortCrossed
                "\"SLICE_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 82: sliceRightShortParallel
                "\"BLOCK_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 83: blockLeftLongCrossed
                "\"BLOCK_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 84: blockLeftLongParallel
                "\"BLOCK_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 85: blockLeftShortCrossed
                "\"BLOCK_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 86: blockLeftShortParallel
                "\"BLOCK_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 87: blockMiddleLongCrossed
                "\"BLOCK_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 88: blockMiddleLongParallel
                "\"BLOCK_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 89: blockMiddleShortCrossed
                "\"BLOCK_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 90: blockMiddleShortParallel
                "\"BLOCK_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 91: blockRightLongCrossed
                "\"BLOCK_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 92: blockRightLongParallel
                "\"BLOCK_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 93: blockRightShortCrossed
                "\"BLOCK_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 94: blockRightShortParallel
                "\"FLICK_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 95: flickLeftLongCrossed
                "\"FLICK_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 96: flickLeftLongParallel
                "\"FLICK_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 97: flickLeftShortCrossed
                "\"FLICK_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 98: flickLeftShortParallel
                "\"FLICK_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 99: flickMiddleLongCrossed
                "\"FLICK_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 100: flickMiddleLongParallel
                "\"FLICK_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 101: flickMiddleShortCrossed
                "\"FLICK_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 102: flickMiddleShortParallel
                "\"FLICK_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 103: flickRightLongCrossed
                "\"FLICK_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 104: flickRightLongParallel
                "\"FLICK_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 105: flickRightShortCrossed
                "\"FLICK_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 106: flickRightShortParallel
                "\"LOB_LEFT_LONG_CROSSED\" INTEGER NOT NULL ," + // 107: lobLeftLongCrossed
                "\"LOB_LEFT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 108: lobLeftLongParallel
                "\"LOB_LEFT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 109: lobLeftShortCrossed
                "\"LOB_LEFT_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 110: lobLeftShortParallel
                "\"LOB_MIDDLE_LONG_CROSSED\" INTEGER NOT NULL ," + // 111: lobMiddleLongCrossed
                "\"LOB_MIDDLE_LONG_PARALLEL\" INTEGER NOT NULL ," + // 112: lobMiddleLongParallel
                "\"LOB_MIDDLE_SHORT_CROSSED\" INTEGER NOT NULL ," + // 113: lobMiddleShortCrossed
                "\"LOB_MIDDLE_SHORT_PARALLEL\" INTEGER NOT NULL ," + // 114: lobMiddleShortParallel
                "\"LOB_RIGHT_LONG_CROSSED\" INTEGER NOT NULL ," + // 115: lobRightLongCrossed
                "\"LOB_RIGHT_LONG_PARALLEL\" INTEGER NOT NULL ," + // 116: lobRightLongParallel
                "\"LOB_RIGHT_SHORT_CROSSED\" INTEGER NOT NULL ," + // 117: lobRightShortCrossed
                "\"LOB_RIGHT_SHORT_PARALLEL\" INTEGER NOT NULL );"); // 118: lobRightShortParallel
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getService());
        stmt.bindLong(3, entity.getReception());
        stmt.bindLong(4, entity.getForehand());
        stmt.bindLong(5, entity.getBackhand());
        stmt.bindLong(6, entity.getSmash());
        stmt.bindLong(7, entity.getSlice());
        stmt.bindLong(8, entity.getBlock());
        stmt.bindLong(9, entity.getFlick());
        stmt.bindLong(10, entity.getLob());
        stmt.bindLong(11, entity.getTotal());
        stmt.bindLong(12, entity.getServiceLeftLongCrossed());
        stmt.bindLong(13, entity.getServiceLeftLongParallel());
        stmt.bindLong(14, entity.getServiceLeftShortCrossed());
        stmt.bindLong(15, entity.getServiceLeftShortParallel());
        stmt.bindLong(16, entity.getServiceMiddleLongCrossed());
        stmt.bindLong(17, entity.getServiceMiddleLongParallel());
        stmt.bindLong(18, entity.getServiceMiddleShortCrossed());
        stmt.bindLong(19, entity.getServiceMiddleShortParallel());
        stmt.bindLong(20, entity.getServiceRightLongCrossed());
        stmt.bindLong(21, entity.getServiceRightLongParallel());
        stmt.bindLong(22, entity.getServiceRightShortCrossed());
        stmt.bindLong(23, entity.getServiceRightShortParallel());
        stmt.bindLong(24, entity.getReceptionLeftLongCrossed());
        stmt.bindLong(25, entity.getReceptionLeftLongParallel());
        stmt.bindLong(26, entity.getReceptionLeftShortCrossed());
        stmt.bindLong(27, entity.getReceptionLeftShortParallel());
        stmt.bindLong(28, entity.getReceptionMiddleLongCrossed());
        stmt.bindLong(29, entity.getReceptionMiddleLongParallel());
        stmt.bindLong(30, entity.getReceptionMiddleShortCrossed());
        stmt.bindLong(31, entity.getReceptionMiddleShortParallel());
        stmt.bindLong(32, entity.getReceptionRightLongCrossed());
        stmt.bindLong(33, entity.getReceptionRightLongParallel());
        stmt.bindLong(34, entity.getReceptionRightShortCrossed());
        stmt.bindLong(35, entity.getReceptionRightShortParallel());
        stmt.bindLong(36, entity.getForehandLeftLongCrossed());
        stmt.bindLong(37, entity.getForehandLeftLongParallel());
        stmt.bindLong(38, entity.getForehandLeftShortCrossed());
        stmt.bindLong(39, entity.getForehandLeftShortParallel());
        stmt.bindLong(40, entity.getForehandMiddleLongCrossed());
        stmt.bindLong(41, entity.getForehandMiddleLongParallel());
        stmt.bindLong(42, entity.getForehandMiddleShortCrossed());
        stmt.bindLong(43, entity.getForehandMiddleShortParallel());
        stmt.bindLong(44, entity.getForehandRightLongCrossed());
        stmt.bindLong(45, entity.getForehandRightLongParallel());
        stmt.bindLong(46, entity.getForehandRightShortCrossed());
        stmt.bindLong(47, entity.getForehandRightShortParallel());
        stmt.bindLong(48, entity.getBackhandLeftLongCrossed());
        stmt.bindLong(49, entity.getBackhandLeftLongParallel());
        stmt.bindLong(50, entity.getBackhandLeftShortCrossed());
        stmt.bindLong(51, entity.getBackhandLeftShortParallel());
        stmt.bindLong(52, entity.getBackhandMiddleLongCrossed());
        stmt.bindLong(53, entity.getBackhandMiddleLongParallel());
        stmt.bindLong(54, entity.getBackhandMiddleShortCrossed());
        stmt.bindLong(55, entity.getBackhandMiddleShortParallel());
        stmt.bindLong(56, entity.getBackhandRightLongCrossed());
        stmt.bindLong(57, entity.getBackhandRightLongParallel());
        stmt.bindLong(58, entity.getBackhandRightShortCrossed());
        stmt.bindLong(59, entity.getBackhandRightShortParallel());
        stmt.bindLong(60, entity.getSmashLeftLongCrossed());
        stmt.bindLong(61, entity.getSmashLeftLongParallel());
        stmt.bindLong(62, entity.getSmashLeftShortCrossed());
        stmt.bindLong(63, entity.getSmashLeftShortParallel());
        stmt.bindLong(64, entity.getSmashMiddleLongCrossed());
        stmt.bindLong(65, entity.getSmashMiddleLongParallel());
        stmt.bindLong(66, entity.getSmashMiddleShortCrossed());
        stmt.bindLong(67, entity.getSmashMiddleShortParallel());
        stmt.bindLong(68, entity.getSmashRightLongCrossed());
        stmt.bindLong(69, entity.getSmashRightLongParallel());
        stmt.bindLong(70, entity.getSmashRightShortCrossed());
        stmt.bindLong(71, entity.getSmashRightShortParallel());
        stmt.bindLong(72, entity.getSliceLeftLongCrossed());
        stmt.bindLong(73, entity.getSliceLeftLongParallel());
        stmt.bindLong(74, entity.getSliceLeftShortCrossed());
        stmt.bindLong(75, entity.getSliceLeftShortParallel());
        stmt.bindLong(76, entity.getSliceMiddleLongCrossed());
        stmt.bindLong(77, entity.getSliceMiddleLongParallel());
        stmt.bindLong(78, entity.getSliceMiddleShortCrossed());
        stmt.bindLong(79, entity.getSliceMiddleShortParallel());
        stmt.bindLong(80, entity.getSliceRightLongCrossed());
        stmt.bindLong(81, entity.getSliceRightLongParallel());
        stmt.bindLong(82, entity.getSliceRightShortCrossed());
        stmt.bindLong(83, entity.getSliceRightShortParallel());
        stmt.bindLong(84, entity.getBlockLeftLongCrossed());
        stmt.bindLong(85, entity.getBlockLeftLongParallel());
        stmt.bindLong(86, entity.getBlockLeftShortCrossed());
        stmt.bindLong(87, entity.getBlockLeftShortParallel());
        stmt.bindLong(88, entity.getBlockMiddleLongCrossed());
        stmt.bindLong(89, entity.getBlockMiddleLongParallel());
        stmt.bindLong(90, entity.getBlockMiddleShortCrossed());
        stmt.bindLong(91, entity.getBlockMiddleShortParallel());
        stmt.bindLong(92, entity.getBlockRightLongCrossed());
        stmt.bindLong(93, entity.getBlockRightLongParallel());
        stmt.bindLong(94, entity.getBlockRightShortCrossed());
        stmt.bindLong(95, entity.getBlockRightShortParallel());
        stmt.bindLong(96, entity.getFlickLeftLongCrossed());
        stmt.bindLong(97, entity.getFlickLeftLongParallel());
        stmt.bindLong(98, entity.getFlickLeftShortCrossed());
        stmt.bindLong(99, entity.getFlickLeftShortParallel());
        stmt.bindLong(100, entity.getFlickMiddleLongCrossed());
        stmt.bindLong(101, entity.getFlickMiddleLongParallel());
        stmt.bindLong(102, entity.getFlickMiddleShortCrossed());
        stmt.bindLong(103, entity.getFlickMiddleShortParallel());
        stmt.bindLong(104, entity.getFlickRightLongCrossed());
        stmt.bindLong(105, entity.getFlickRightLongParallel());
        stmt.bindLong(106, entity.getFlickRightShortCrossed());
        stmt.bindLong(107, entity.getFlickRightShortParallel());
        stmt.bindLong(108, entity.getLobLeftLongCrossed());
        stmt.bindLong(109, entity.getLobLeftLongParallel());
        stmt.bindLong(110, entity.getLobLeftShortCrossed());
        stmt.bindLong(111, entity.getLobLeftShortParallel());
        stmt.bindLong(112, entity.getLobMiddleLongCrossed());
        stmt.bindLong(113, entity.getLobMiddleLongParallel());
        stmt.bindLong(114, entity.getLobMiddleShortCrossed());
        stmt.bindLong(115, entity.getLobMiddleShortParallel());
        stmt.bindLong(116, entity.getLobRightLongCrossed());
        stmt.bindLong(117, entity.getLobRightLongParallel());
        stmt.bindLong(118, entity.getLobRightShortCrossed());
        stmt.bindLong(119, entity.getLobRightShortParallel());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameUser readEntity(Cursor cursor, int offset) {
        GameUser entity = new GameUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // service
            cursor.getInt(offset + 2), // reception
            cursor.getInt(offset + 3), // forehand
            cursor.getInt(offset + 4), // backhand
            cursor.getInt(offset + 5), // smash
            cursor.getInt(offset + 6), // slice
            cursor.getInt(offset + 7), // block
            cursor.getInt(offset + 8), // flick
            cursor.getInt(offset + 9), // lob
            cursor.getInt(offset + 10), // total
            cursor.getInt(offset + 11), // serviceLeftLongCrossed
            cursor.getInt(offset + 12), // serviceLeftLongParallel
            cursor.getInt(offset + 13), // serviceLeftShortCrossed
            cursor.getInt(offset + 14), // serviceLeftShortParallel
            cursor.getInt(offset + 15), // serviceMiddleLongCrossed
            cursor.getInt(offset + 16), // serviceMiddleLongParallel
            cursor.getInt(offset + 17), // serviceMiddleShortCrossed
            cursor.getInt(offset + 18), // serviceMiddleShortParallel
            cursor.getInt(offset + 19), // serviceRightLongCrossed
            cursor.getInt(offset + 20), // serviceRightLongParallel
            cursor.getInt(offset + 21), // serviceRightShortCrossed
            cursor.getInt(offset + 22), // serviceRightShortParallel
            cursor.getInt(offset + 23), // receptionLeftLongCrossed
            cursor.getInt(offset + 24), // receptionLeftLongParallel
            cursor.getInt(offset + 25), // receptionLeftShortCrossed
            cursor.getInt(offset + 26), // receptionLeftShortParallel
            cursor.getInt(offset + 27), // receptionMiddleLongCrossed
            cursor.getInt(offset + 28), // receptionMiddleLongParallel
            cursor.getInt(offset + 29), // receptionMiddleShortCrossed
            cursor.getInt(offset + 30), // receptionMiddleShortParallel
            cursor.getInt(offset + 31), // receptionRightLongCrossed
            cursor.getInt(offset + 32), // receptionRightLongParallel
            cursor.getInt(offset + 33), // receptionRightShortCrossed
            cursor.getInt(offset + 34), // receptionRightShortParallel
            cursor.getInt(offset + 35), // forehandLeftLongCrossed
            cursor.getInt(offset + 36), // forehandLeftLongParallel
            cursor.getInt(offset + 37), // forehandLeftShortCrossed
            cursor.getInt(offset + 38), // forehandLeftShortParallel
            cursor.getInt(offset + 39), // forehandMiddleLongCrossed
            cursor.getInt(offset + 40), // forehandMiddleLongParallel
            cursor.getInt(offset + 41), // forehandMiddleShortCrossed
            cursor.getInt(offset + 42), // forehandMiddleShortParallel
            cursor.getInt(offset + 43), // forehandRightLongCrossed
            cursor.getInt(offset + 44), // forehandRightLongParallel
            cursor.getInt(offset + 45), // forehandRightShortCrossed
            cursor.getInt(offset + 46), // forehandRightShortParallel
            cursor.getInt(offset + 47), // backhandLeftLongCrossed
            cursor.getInt(offset + 48), // backhandLeftLongParallel
            cursor.getInt(offset + 49), // backhandLeftShortCrossed
            cursor.getInt(offset + 50), // backhandLeftShortParallel
            cursor.getInt(offset + 51), // backhandMiddleLongCrossed
            cursor.getInt(offset + 52), // backhandMiddleLongParallel
            cursor.getInt(offset + 53), // backhandMiddleShortCrossed
            cursor.getInt(offset + 54), // backhandMiddleShortParallel
            cursor.getInt(offset + 55), // backhandRightLongCrossed
            cursor.getInt(offset + 56), // backhandRightLongParallel
            cursor.getInt(offset + 57), // backhandRightShortCrossed
            cursor.getInt(offset + 58), // backhandRightShortParallel
            cursor.getInt(offset + 59), // smashLeftLongCrossed
            cursor.getInt(offset + 60), // smashLeftLongParallel
            cursor.getInt(offset + 61), // smashLeftShortCrossed
            cursor.getInt(offset + 62), // smashLeftShortParallel
            cursor.getInt(offset + 63), // smashMiddleLongCrossed
            cursor.getInt(offset + 64), // smashMiddleLongParallel
            cursor.getInt(offset + 65), // smashMiddleShortCrossed
            cursor.getInt(offset + 66), // smashMiddleShortParallel
            cursor.getInt(offset + 67), // smashRightLongCrossed
            cursor.getInt(offset + 68), // smashRightLongParallel
            cursor.getInt(offset + 69), // smashRightShortCrossed
            cursor.getInt(offset + 70), // smashRightShortParallel
            cursor.getInt(offset + 71), // sliceLeftLongCrossed
            cursor.getInt(offset + 72), // sliceLeftLongParallel
            cursor.getInt(offset + 73), // sliceLeftShortCrossed
            cursor.getInt(offset + 74), // sliceLeftShortParallel
            cursor.getInt(offset + 75), // sliceMiddleLongCrossed
            cursor.getInt(offset + 76), // sliceMiddleLongParallel
            cursor.getInt(offset + 77), // sliceMiddleShortCrossed
            cursor.getInt(offset + 78), // sliceMiddleShortParallel
            cursor.getInt(offset + 79), // sliceRightLongCrossed
            cursor.getInt(offset + 80), // sliceRightLongParallel
            cursor.getInt(offset + 81), // sliceRightShortCrossed
            cursor.getInt(offset + 82), // sliceRightShortParallel
            cursor.getInt(offset + 83), // blockLeftLongCrossed
            cursor.getInt(offset + 84), // blockLeftLongParallel
            cursor.getInt(offset + 85), // blockLeftShortCrossed
            cursor.getInt(offset + 86), // blockLeftShortParallel
            cursor.getInt(offset + 87), // blockMiddleLongCrossed
            cursor.getInt(offset + 88), // blockMiddleLongParallel
            cursor.getInt(offset + 89), // blockMiddleShortCrossed
            cursor.getInt(offset + 90), // blockMiddleShortParallel
            cursor.getInt(offset + 91), // blockRightLongCrossed
            cursor.getInt(offset + 92), // blockRightLongParallel
            cursor.getInt(offset + 93), // blockRightShortCrossed
            cursor.getInt(offset + 94), // blockRightShortParallel
            cursor.getInt(offset + 95), // flickLeftLongCrossed
            cursor.getInt(offset + 96), // flickLeftLongParallel
            cursor.getInt(offset + 97), // flickLeftShortCrossed
            cursor.getInt(offset + 98), // flickLeftShortParallel
            cursor.getInt(offset + 99), // flickMiddleLongCrossed
            cursor.getInt(offset + 100), // flickMiddleLongParallel
            cursor.getInt(offset + 101), // flickMiddleShortCrossed
            cursor.getInt(offset + 102), // flickMiddleShortParallel
            cursor.getInt(offset + 103), // flickRightLongCrossed
            cursor.getInt(offset + 104), // flickRightLongParallel
            cursor.getInt(offset + 105), // flickRightShortCrossed
            cursor.getInt(offset + 106), // flickRightShortParallel
            cursor.getInt(offset + 107), // lobLeftLongCrossed
            cursor.getInt(offset + 108), // lobLeftLongParallel
            cursor.getInt(offset + 109), // lobLeftShortCrossed
            cursor.getInt(offset + 110), // lobLeftShortParallel
            cursor.getInt(offset + 111), // lobMiddleLongCrossed
            cursor.getInt(offset + 112), // lobMiddleLongParallel
            cursor.getInt(offset + 113), // lobMiddleShortCrossed
            cursor.getInt(offset + 114), // lobMiddleShortParallel
            cursor.getInt(offset + 115), // lobRightLongCrossed
            cursor.getInt(offset + 116), // lobRightLongParallel
            cursor.getInt(offset + 117), // lobRightShortCrossed
            cursor.getInt(offset + 118) // lobRightShortParallel
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setService(cursor.getInt(offset + 1));
        entity.setReception(cursor.getInt(offset + 2));
        entity.setForehand(cursor.getInt(offset + 3));
        entity.setBackhand(cursor.getInt(offset + 4));
        entity.setSmash(cursor.getInt(offset + 5));
        entity.setSlice(cursor.getInt(offset + 6));
        entity.setBlock(cursor.getInt(offset + 7));
        entity.setFlick(cursor.getInt(offset + 8));
        entity.setLob(cursor.getInt(offset + 9));
        entity.setTotal(cursor.getInt(offset + 10));
        entity.setServiceLeftLongCrossed(cursor.getInt(offset + 11));
        entity.setServiceLeftLongParallel(cursor.getInt(offset + 12));
        entity.setServiceLeftShortCrossed(cursor.getInt(offset + 13));
        entity.setServiceLeftShortParallel(cursor.getInt(offset + 14));
        entity.setServiceMiddleLongCrossed(cursor.getInt(offset + 15));
        entity.setServiceMiddleLongParallel(cursor.getInt(offset + 16));
        entity.setServiceMiddleShortCrossed(cursor.getInt(offset + 17));
        entity.setServiceMiddleShortParallel(cursor.getInt(offset + 18));
        entity.setServiceRightLongCrossed(cursor.getInt(offset + 19));
        entity.setServiceRightLongParallel(cursor.getInt(offset + 20));
        entity.setServiceRightShortCrossed(cursor.getInt(offset + 21));
        entity.setServiceRightShortParallel(cursor.getInt(offset + 22));
        entity.setReceptionLeftLongCrossed(cursor.getInt(offset + 23));
        entity.setReceptionLeftLongParallel(cursor.getInt(offset + 24));
        entity.setReceptionLeftShortCrossed(cursor.getInt(offset + 25));
        entity.setReceptionLeftShortParallel(cursor.getInt(offset + 26));
        entity.setReceptionMiddleLongCrossed(cursor.getInt(offset + 27));
        entity.setReceptionMiddleLongParallel(cursor.getInt(offset + 28));
        entity.setReceptionMiddleShortCrossed(cursor.getInt(offset + 29));
        entity.setReceptionMiddleShortParallel(cursor.getInt(offset + 30));
        entity.setReceptionRightLongCrossed(cursor.getInt(offset + 31));
        entity.setReceptionRightLongParallel(cursor.getInt(offset + 32));
        entity.setReceptionRightShortCrossed(cursor.getInt(offset + 33));
        entity.setReceptionRightShortParallel(cursor.getInt(offset + 34));
        entity.setForehandLeftLongCrossed(cursor.getInt(offset + 35));
        entity.setForehandLeftLongParallel(cursor.getInt(offset + 36));
        entity.setForehandLeftShortCrossed(cursor.getInt(offset + 37));
        entity.setForehandLeftShortParallel(cursor.getInt(offset + 38));
        entity.setForehandMiddleLongCrossed(cursor.getInt(offset + 39));
        entity.setForehandMiddleLongParallel(cursor.getInt(offset + 40));
        entity.setForehandMiddleShortCrossed(cursor.getInt(offset + 41));
        entity.setForehandMiddleShortParallel(cursor.getInt(offset + 42));
        entity.setForehandRightLongCrossed(cursor.getInt(offset + 43));
        entity.setForehandRightLongParallel(cursor.getInt(offset + 44));
        entity.setForehandRightShortCrossed(cursor.getInt(offset + 45));
        entity.setForehandRightShortParallel(cursor.getInt(offset + 46));
        entity.setBackhandLeftLongCrossed(cursor.getInt(offset + 47));
        entity.setBackhandLeftLongParallel(cursor.getInt(offset + 48));
        entity.setBackhandLeftShortCrossed(cursor.getInt(offset + 49));
        entity.setBackhandLeftShortParallel(cursor.getInt(offset + 50));
        entity.setBackhandMiddleLongCrossed(cursor.getInt(offset + 51));
        entity.setBackhandMiddleLongParallel(cursor.getInt(offset + 52));
        entity.setBackhandMiddleShortCrossed(cursor.getInt(offset + 53));
        entity.setBackhandMiddleShortParallel(cursor.getInt(offset + 54));
        entity.setBackhandRightLongCrossed(cursor.getInt(offset + 55));
        entity.setBackhandRightLongParallel(cursor.getInt(offset + 56));
        entity.setBackhandRightShortCrossed(cursor.getInt(offset + 57));
        entity.setBackhandRightShortParallel(cursor.getInt(offset + 58));
        entity.setSmashLeftLongCrossed(cursor.getInt(offset + 59));
        entity.setSmashLeftLongParallel(cursor.getInt(offset + 60));
        entity.setSmashLeftShortCrossed(cursor.getInt(offset + 61));
        entity.setSmashLeftShortParallel(cursor.getInt(offset + 62));
        entity.setSmashMiddleLongCrossed(cursor.getInt(offset + 63));
        entity.setSmashMiddleLongParallel(cursor.getInt(offset + 64));
        entity.setSmashMiddleShortCrossed(cursor.getInt(offset + 65));
        entity.setSmashMiddleShortParallel(cursor.getInt(offset + 66));
        entity.setSmashRightLongCrossed(cursor.getInt(offset + 67));
        entity.setSmashRightLongParallel(cursor.getInt(offset + 68));
        entity.setSmashRightShortCrossed(cursor.getInt(offset + 69));
        entity.setSmashRightShortParallel(cursor.getInt(offset + 70));
        entity.setSliceLeftLongCrossed(cursor.getInt(offset + 71));
        entity.setSliceLeftLongParallel(cursor.getInt(offset + 72));
        entity.setSliceLeftShortCrossed(cursor.getInt(offset + 73));
        entity.setSliceLeftShortParallel(cursor.getInt(offset + 74));
        entity.setSliceMiddleLongCrossed(cursor.getInt(offset + 75));
        entity.setSliceMiddleLongParallel(cursor.getInt(offset + 76));
        entity.setSliceMiddleShortCrossed(cursor.getInt(offset + 77));
        entity.setSliceMiddleShortParallel(cursor.getInt(offset + 78));
        entity.setSliceRightLongCrossed(cursor.getInt(offset + 79));
        entity.setSliceRightLongParallel(cursor.getInt(offset + 80));
        entity.setSliceRightShortCrossed(cursor.getInt(offset + 81));
        entity.setSliceRightShortParallel(cursor.getInt(offset + 82));
        entity.setBlockLeftLongCrossed(cursor.getInt(offset + 83));
        entity.setBlockLeftLongParallel(cursor.getInt(offset + 84));
        entity.setBlockLeftShortCrossed(cursor.getInt(offset + 85));
        entity.setBlockLeftShortParallel(cursor.getInt(offset + 86));
        entity.setBlockMiddleLongCrossed(cursor.getInt(offset + 87));
        entity.setBlockMiddleLongParallel(cursor.getInt(offset + 88));
        entity.setBlockMiddleShortCrossed(cursor.getInt(offset + 89));
        entity.setBlockMiddleShortParallel(cursor.getInt(offset + 90));
        entity.setBlockRightLongCrossed(cursor.getInt(offset + 91));
        entity.setBlockRightLongParallel(cursor.getInt(offset + 92));
        entity.setBlockRightShortCrossed(cursor.getInt(offset + 93));
        entity.setBlockRightShortParallel(cursor.getInt(offset + 94));
        entity.setFlickLeftLongCrossed(cursor.getInt(offset + 95));
        entity.setFlickLeftLongParallel(cursor.getInt(offset + 96));
        entity.setFlickLeftShortCrossed(cursor.getInt(offset + 97));
        entity.setFlickLeftShortParallel(cursor.getInt(offset + 98));
        entity.setFlickMiddleLongCrossed(cursor.getInt(offset + 99));
        entity.setFlickMiddleLongParallel(cursor.getInt(offset + 100));
        entity.setFlickMiddleShortCrossed(cursor.getInt(offset + 101));
        entity.setFlickMiddleShortParallel(cursor.getInt(offset + 102));
        entity.setFlickRightLongCrossed(cursor.getInt(offset + 103));
        entity.setFlickRightLongParallel(cursor.getInt(offset + 104));
        entity.setFlickRightShortCrossed(cursor.getInt(offset + 105));
        entity.setFlickRightShortParallel(cursor.getInt(offset + 106));
        entity.setLobLeftLongCrossed(cursor.getInt(offset + 107));
        entity.setLobLeftLongParallel(cursor.getInt(offset + 108));
        entity.setLobLeftShortCrossed(cursor.getInt(offset + 109));
        entity.setLobLeftShortParallel(cursor.getInt(offset + 110));
        entity.setLobMiddleLongCrossed(cursor.getInt(offset + 111));
        entity.setLobMiddleLongParallel(cursor.getInt(offset + 112));
        entity.setLobMiddleShortCrossed(cursor.getInt(offset + 113));
        entity.setLobMiddleShortParallel(cursor.getInt(offset + 114));
        entity.setLobRightLongCrossed(cursor.getInt(offset + 115));
        entity.setLobRightLongParallel(cursor.getInt(offset + 116));
        entity.setLobRightShortCrossed(cursor.getInt(offset + 117));
        entity.setLobRightShortParallel(cursor.getInt(offset + 118));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
