package scoutapp.com.br.scoutapp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import scoutapp.com.br.scoutapp.model.Athlete;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATHLETE".
*/
public class AthleteDao extends AbstractDao<Athlete, Long> {

    public static final String TABLENAME = "ATHLETE";

    /**
     * Properties of entity Athlete.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, Integer.class, "age", false, "AGE");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Club = new Property(4, String.class, "club", false, "CLUB");
        public final static Property Hand = new Property(5, Integer.class, "hand", false, "HAND");
        public final static Property Style = new Property(6, Integer.class, "style", false, "STYLE");
        public final static Property Obs = new Property(7, String.class, "obs", false, "OBS");
    };


    public AthleteDao(DaoConfig config) {
        super(config);
    }
    
    public AthleteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATHLETE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" INTEGER," + // 2: age
                "\"CATEGORY\" TEXT," + // 3: category
                "\"CLUB\" TEXT," + // 4: club
                "\"HAND\" INTEGER," + // 5: hand
                "\"STYLE\" INTEGER," + // 6: style
                "\"OBS\" TEXT);"); // 7: obs
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATHLETE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Athlete entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String club = entity.getClub();
        if (club != null) {
            stmt.bindString(5, club);
        }
 
        Integer hand = entity.getHand();
        if (hand != null) {
            stmt.bindLong(6, hand);
        }
 
        Integer style = entity.getStyle();
        if (style != null) {
            stmt.bindLong(7, style);
        }
 
        String obs = entity.getObs();
        if (obs != null) {
            stmt.bindString(8, obs);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Athlete readEntity(Cursor cursor, int offset) {
        Athlete entity = new Athlete( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // club
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // hand
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // style
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // obs
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Athlete entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClub(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHand(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStyle(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setObs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Athlete entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Athlete entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
